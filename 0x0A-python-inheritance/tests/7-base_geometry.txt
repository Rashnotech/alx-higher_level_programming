>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0
>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print(e)
integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> try:
...    bg.integer_validator(" ", 6.2)
... except Exception as e:
...    print(e)
  must be an integer
>>> try:
...     bg.integer_validator("zero", 4.)
... except Exception as e:
...     print(e)
zero must be an integer
>>> try:
...     bg.area()
... except Exception as e:
...     print(e)
area() is not implemented
>>> try:
...     bg.integer_validator(int, -2)
... except Exception as e:
...    print(e)
<class 'int'> must be greater than 0
>>> try:
...     bg.integer_validator("width", True)
... except Exception as e:
...     print(e)
width must be an integer
>>> try:
...     bg.integer_validator(None, None)
... except Exception as e:
...     print(e)
None must be an integer
>>> try:
...     bg.integer_validator("float", "43")
... except Exception as e:
...     print(e)
float must be an integer
>>> try:
...     bg.integer_validator("num", 5j)
... except Exception as e:
...     print(e)
num must be an integer
>>> try:
...     bg.integer_validator("tupled", (65, 43))
... except Exception as e:
...     print(e)
tupled must be an integer
>>> try:
...    bg.integer_validator(None, 0.3832384248459291)
... except Exception as e:
...    print(e)
None must be an integer
>>> try:
...    bg.integer_validator(None, (45, 12))
... except Exception as e:
...    print(e)
None must be an integer
>>> try:
...    bg.integer_validator(None, int("Light"))
... except Exception as e:
...    print(e)
invalid literal for int() with base 10: 'Light'
